// Generated by gencpp from file bodyreader/joint.msg
// DO NOT EDIT!


#ifndef BODYREADER_MESSAGE_JOINT_H
#define BODYREADER_MESSAGE_JOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <bodyreader/vector2f.h>
#include <bodyreader/vector3f.h>

namespace bodyreader
{
template <class ContainerAllocator>
struct joint_
{
  typedef joint_<ContainerAllocator> Type;

  joint_()
    : type(0)
    , depthPosition()
    , worldPosition()  {
    }
  joint_(const ContainerAllocator& _alloc)
    : type(0)
    , depthPosition(_alloc)
    , worldPosition(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _type_type;
  _type_type type;

   typedef  ::bodyreader::vector2f_<ContainerAllocator>  _depthPosition_type;
  _depthPosition_type depthPosition;

   typedef  ::bodyreader::vector3f_<ContainerAllocator>  _worldPosition_type;
  _worldPosition_type worldPosition;





  typedef boost::shared_ptr< ::bodyreader::joint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bodyreader::joint_<ContainerAllocator> const> ConstPtr;

}; // struct joint_

typedef ::bodyreader::joint_<std::allocator<void> > joint;

typedef boost::shared_ptr< ::bodyreader::joint > jointPtr;
typedef boost::shared_ptr< ::bodyreader::joint const> jointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bodyreader::joint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bodyreader::joint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bodyreader::joint_<ContainerAllocator1> & lhs, const ::bodyreader::joint_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.depthPosition == rhs.depthPosition &&
    lhs.worldPosition == rhs.worldPosition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bodyreader::joint_<ContainerAllocator1> & lhs, const ::bodyreader::joint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bodyreader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bodyreader::joint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bodyreader::joint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bodyreader::joint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bodyreader::joint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bodyreader::joint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bodyreader::joint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bodyreader::joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4de40bc4d9da2df315d3755d4261051";
  }

  static const char* value(const ::bodyreader::joint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4de40bc4d9da2dfULL;
  static const uint64_t static_value2 = 0x315d3755d4261051ULL;
};

template<class ContainerAllocator>
struct DataType< ::bodyreader::joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bodyreader/joint";
  }

  static const char* value(const ::bodyreader::joint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bodyreader::joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 type\n"
"vector2f depthPosition\n"
"vector3f worldPosition\n"
"================================================================================\n"
"MSG: bodyreader/vector2f\n"
"float32 x\n"
"float32 y\n"
"================================================================================\n"
"MSG: bodyreader/vector3f\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::bodyreader::joint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bodyreader::joint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.depthPosition);
      stream.next(m.worldPosition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bodyreader::joint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bodyreader::joint_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "depthPosition: ";
    s << std::endl;
    Printer< ::bodyreader::vector2f_<ContainerAllocator> >::stream(s, indent + "  ", v.depthPosition);
    s << indent << "worldPosition: ";
    s << std::endl;
    Printer< ::bodyreader::vector3f_<ContainerAllocator> >::stream(s, indent + "  ", v.worldPosition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BODYREADER_MESSAGE_JOINT_H
