// Generated by gencpp from file bodyreader/lockedmask_w_h.msg
// DO NOT EDIT!


#ifndef BODYREADER_MESSAGE_LOCKEDMASK_W_H_H
#define BODYREADER_MESSAGE_LOCKEDMASK_W_H_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bodyreader
{
template <class ContainerAllocator>
struct lockedmask_w_h_
{
  typedef lockedmask_w_h_<ContainerAllocator> Type;

  lockedmask_w_h_()
    : width_l(0)
    , width_r(0)
    , height_t(0)
    , height_b(0)  {
    }
  lockedmask_w_h_(const ContainerAllocator& _alloc)
    : width_l(0)
    , width_r(0)
    , height_t(0)
    , height_b(0)  {
  (void)_alloc;
    }



   typedef int32_t _width_l_type;
  _width_l_type width_l;

   typedef int32_t _width_r_type;
  _width_r_type width_r;

   typedef int32_t _height_t_type;
  _height_t_type height_t;

   typedef int32_t _height_b_type;
  _height_b_type height_b;





  typedef boost::shared_ptr< ::bodyreader::lockedmask_w_h_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bodyreader::lockedmask_w_h_<ContainerAllocator> const> ConstPtr;

}; // struct lockedmask_w_h_

typedef ::bodyreader::lockedmask_w_h_<std::allocator<void> > lockedmask_w_h;

typedef boost::shared_ptr< ::bodyreader::lockedmask_w_h > lockedmask_w_hPtr;
typedef boost::shared_ptr< ::bodyreader::lockedmask_w_h const> lockedmask_w_hConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bodyreader::lockedmask_w_h_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bodyreader::lockedmask_w_h_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bodyreader::lockedmask_w_h_<ContainerAllocator1> & lhs, const ::bodyreader::lockedmask_w_h_<ContainerAllocator2> & rhs)
{
  return lhs.width_l == rhs.width_l &&
    lhs.width_r == rhs.width_r &&
    lhs.height_t == rhs.height_t &&
    lhs.height_b == rhs.height_b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bodyreader::lockedmask_w_h_<ContainerAllocator1> & lhs, const ::bodyreader::lockedmask_w_h_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bodyreader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bodyreader::lockedmask_w_h_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bodyreader::lockedmask_w_h_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bodyreader::lockedmask_w_h_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bodyreader::lockedmask_w_h_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bodyreader::lockedmask_w_h_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bodyreader::lockedmask_w_h_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bodyreader::lockedmask_w_h_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4642cd8cf102c212293540c01a4443bd";
  }

  static const char* value(const ::bodyreader::lockedmask_w_h_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4642cd8cf102c212ULL;
  static const uint64_t static_value2 = 0x293540c01a4443bdULL;
};

template<class ContainerAllocator>
struct DataType< ::bodyreader::lockedmask_w_h_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bodyreader/lockedmask_w_h";
  }

  static const char* value(const ::bodyreader::lockedmask_w_h_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bodyreader::lockedmask_w_h_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 width_l\n"
"int32 width_r\n"
"int32 height_t\n"
"int32 height_b\n"
;
  }

  static const char* value(const ::bodyreader::lockedmask_w_h_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bodyreader::lockedmask_w_h_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width_l);
      stream.next(m.width_r);
      stream.next(m.height_t);
      stream.next(m.height_b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lockedmask_w_h_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bodyreader::lockedmask_w_h_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bodyreader::lockedmask_w_h_<ContainerAllocator>& v)
  {
    s << indent << "width_l: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width_l);
    s << indent << "width_r: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width_r);
    s << indent << "height_t: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height_t);
    s << indent << "height_b: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height_b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BODYREADER_MESSAGE_LOCKEDMASK_W_H_H
