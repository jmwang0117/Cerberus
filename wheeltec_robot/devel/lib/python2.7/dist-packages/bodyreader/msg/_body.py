# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bodyreader/body.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bodyreader.msg

class body(genpy.Message):
  _md5sum = "57f2da357721aaca7548e8de3d97f76a"
  _type = "bodyreader/body"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 bodyid
vector3f centerOfMass
joint[19] joints
================================================================================
MSG: bodyreader/vector3f
float32 x
float32 y
float32 z
================================================================================
MSG: bodyreader/joint
int8 type
vector2f depthPosition
vector3f worldPosition
================================================================================
MSG: bodyreader/vector2f
float32 x
float32 y"""
  __slots__ = ['bodyid','centerOfMass','joints']
  _slot_types = ['int16','bodyreader/vector3f','bodyreader/joint[19]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bodyid,centerOfMass,joints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(body, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bodyid is None:
        self.bodyid = 0
      if self.centerOfMass is None:
        self.centerOfMass = bodyreader.msg.vector3f()
      if self.joints is None:
        self.joints = [bodyreader.msg.joint() for _ in range(19)]
    else:
      self.bodyid = 0
      self.centerOfMass = bodyreader.msg.vector3f()
      self.joints = [bodyreader.msg.joint() for _ in range(19)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_h3f().pack(_x.bodyid, _x.centerOfMass.x, _x.centerOfMass.y, _x.centerOfMass.z))
      if len(self.joints) != 19:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (19, len(self.joints), 'self.joints')))
      for val1 in self.joints:
        _x = val1.type
        buff.write(_get_struct_b().pack(_x))
        _v1 = val1.depthPosition
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v2 = val1.worldPosition
        _x = _v2
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.centerOfMass is None:
        self.centerOfMass = bodyreader.msg.vector3f()
      if self.joints is None:
        self.joints = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.bodyid, _x.centerOfMass.x, _x.centerOfMass.y, _x.centerOfMass.z,) = _get_struct_h3f().unpack(str[start:end])
      self.joints = []
      for i in range(0, 19):
        val1 = bodyreader.msg.joint()
        start = end
        end += 1
        (val1.type,) = _get_struct_b().unpack(str[start:end])
        _v3 = val1.depthPosition
        _x = _v3
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v4 = val1.worldPosition
        _x = _v4
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.joints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_h3f().pack(_x.bodyid, _x.centerOfMass.x, _x.centerOfMass.y, _x.centerOfMass.z))
      if len(self.joints) != 19:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (19, len(self.joints), 'self.joints')))
      for val1 in self.joints:
        _x = val1.type
        buff.write(_get_struct_b().pack(_x))
        _v5 = val1.depthPosition
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v6 = val1.worldPosition
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.centerOfMass is None:
        self.centerOfMass = bodyreader.msg.vector3f()
      if self.joints is None:
        self.joints = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.bodyid, _x.centerOfMass.x, _x.centerOfMass.y, _x.centerOfMass.z,) = _get_struct_h3f().unpack(str[start:end])
      self.joints = []
      for i in range(0, 19):
        val1 = bodyreader.msg.joint()
        start = end
        end += 1
        (val1.type,) = _get_struct_b().unpack(str[start:end])
        _v7 = val1.depthPosition
        _x = _v7
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.worldPosition
        _x = _v8
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.joints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_h3f = None
def _get_struct_h3f():
    global _struct_h3f
    if _struct_h3f is None:
        _struct_h3f = struct.Struct("<h3f")
    return _struct_h3f
