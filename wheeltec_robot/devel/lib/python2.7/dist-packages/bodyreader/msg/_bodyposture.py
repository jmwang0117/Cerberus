# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bodyreader/bodyposture.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class bodyposture(genpy.Message):
  _md5sum = "cb21bd82e96aab6d386d23fcd631b859"
  _type = "bodyreader/bodyposture"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 bodyid
float32 CenterOfMass_X
float32 CenterOfMass_Y
float32 CenterOfMass_Z
int8 left_arm_out
int8 right_arm_out
int8 left_hand_raised
int8 right_hand_raised
int8 akimibo
int8 left_foot_up
int8 right_foot_up
int8 fall
int8 tips
int8 lock_status
"""
  __slots__ = ['bodyid','CenterOfMass_X','CenterOfMass_Y','CenterOfMass_Z','left_arm_out','right_arm_out','left_hand_raised','right_hand_raised','akimibo','left_foot_up','right_foot_up','fall','tips','lock_status']
  _slot_types = ['int16','float32','float32','float32','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bodyid,CenterOfMass_X,CenterOfMass_Y,CenterOfMass_Z,left_arm_out,right_arm_out,left_hand_raised,right_hand_raised,akimibo,left_foot_up,right_foot_up,fall,tips,lock_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bodyposture, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bodyid is None:
        self.bodyid = 0
      if self.CenterOfMass_X is None:
        self.CenterOfMass_X = 0.
      if self.CenterOfMass_Y is None:
        self.CenterOfMass_Y = 0.
      if self.CenterOfMass_Z is None:
        self.CenterOfMass_Z = 0.
      if self.left_arm_out is None:
        self.left_arm_out = 0
      if self.right_arm_out is None:
        self.right_arm_out = 0
      if self.left_hand_raised is None:
        self.left_hand_raised = 0
      if self.right_hand_raised is None:
        self.right_hand_raised = 0
      if self.akimibo is None:
        self.akimibo = 0
      if self.left_foot_up is None:
        self.left_foot_up = 0
      if self.right_foot_up is None:
        self.right_foot_up = 0
      if self.fall is None:
        self.fall = 0
      if self.tips is None:
        self.tips = 0
      if self.lock_status is None:
        self.lock_status = 0
    else:
      self.bodyid = 0
      self.CenterOfMass_X = 0.
      self.CenterOfMass_Y = 0.
      self.CenterOfMass_Z = 0.
      self.left_arm_out = 0
      self.right_arm_out = 0
      self.left_hand_raised = 0
      self.right_hand_raised = 0
      self.akimibo = 0
      self.left_foot_up = 0
      self.right_foot_up = 0
      self.fall = 0
      self.tips = 0
      self.lock_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_h3f10b().pack(_x.bodyid, _x.CenterOfMass_X, _x.CenterOfMass_Y, _x.CenterOfMass_Z, _x.left_arm_out, _x.right_arm_out, _x.left_hand_raised, _x.right_hand_raised, _x.akimibo, _x.left_foot_up, _x.right_foot_up, _x.fall, _x.tips, _x.lock_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.bodyid, _x.CenterOfMass_X, _x.CenterOfMass_Y, _x.CenterOfMass_Z, _x.left_arm_out, _x.right_arm_out, _x.left_hand_raised, _x.right_hand_raised, _x.akimibo, _x.left_foot_up, _x.right_foot_up, _x.fall, _x.tips, _x.lock_status,) = _get_struct_h3f10b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_h3f10b().pack(_x.bodyid, _x.CenterOfMass_X, _x.CenterOfMass_Y, _x.CenterOfMass_Z, _x.left_arm_out, _x.right_arm_out, _x.left_hand_raised, _x.right_hand_raised, _x.akimibo, _x.left_foot_up, _x.right_foot_up, _x.fall, _x.tips, _x.lock_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.bodyid, _x.CenterOfMass_X, _x.CenterOfMass_Y, _x.CenterOfMass_Z, _x.left_arm_out, _x.right_arm_out, _x.left_hand_raised, _x.right_hand_raised, _x.akimibo, _x.left_foot_up, _x.right_foot_up, _x.fall, _x.tips, _x.lock_status,) = _get_struct_h3f10b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h3f10b = None
def _get_struct_h3f10b():
    global _struct_h3f10b
    if _struct_h3f10b is None:
        _struct_h3f10b = struct.Struct("<h3f10b")
    return _struct_h3f10b
